<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>All Songs</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/flowbite@2.5.1/dist/flowbite.min.css" rel="stylesheet" />
</head>
<body class="bg-gradient-to-b from-black to-red-700 text-white min-h-screen">

    <header class="bg-black p-4 shadow-md fixed top-0 left-0 right-0 z-10">
        <div class="container mx-auto flex justify-between items-center">
            <h1 class="text-red-500 text-3xl font-bold">SpotiBri</h1>
            <nav class="mt-2">
                <a href="/songs" class="text-white hover:text-red-500 px-3 py-2 transition duration-200">Songs</a>
                <a href="/upload" class="text-white hover:text-red-500 px-3 py-2 transition duration-200">Upload Song</a>
            </nav>
            <form action="/search" method="get" class="flex items-center">
                <input type="text" name="query" placeholder="Search by title or artist" required class="p-2 bg-gray-800 text-white border border-gray-600 rounded-l-md focus:ring-red-500 focus:border-gray-500">
                <button type="submit" class="bg-red-500 text-white px-4 py-2 rounded-r-md hover:bg-red-600 transition duration-200">Search</button>
            </form>
        </div>
    </header>

    <main class="container mx-auto mt-24 p-8">
        <h2 class="text-4xl font-bold text-red-500 mb-6 text-center">All Songs</h2>
        
        <div class="mb-6">
            <h3 class="text-2xl font-bold text-white mb-4">Create New Playlist</h3>
            <input type="text" id="playlist-name" placeholder="Playlist Name" class="p-2 bg-gray-700 text-white border border-gray-600 rounded-md">
            <button onclick="addPlaylist()" class="mt-2 bg-red-500 text-white px-4 py-2 rounded-md hover:bg-red-600 transition duration-200">
                Create Playlist
            </button>
        </div>
        
        
        <!-- Songs Grid -->
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8">
            <% songs.forEach(song => { %>
                <div class="bg-gradient-to-b from-black to-red-800 rounded-lg shadow-lg overflow-hidden transform hover:scale-105 transition duration-300">
                    <div class="p-6">
                        <h3 id="song-title-<%= song.id %>" class="text-2xl font-bold text-white mb-2 cursor-pointer" onclick="editTitle('<%= song.id %>')">
                            <%= song.title %>
                        </h3>
                        <p class="text-gray-300">Artist: <%= song.artist %></p>
                        <p class="text-gray-400">Album: <%= song.album %></p>
                        
                        <div id="edit-section-<%= song.id %>" class="hidden mt-6">
                            <input type="text" id="edit-title-<%= song.id %>" value="<%= song.title %>" class="p-2 w-full bg-gray-700 text-white border border-gray-600 rounded-md">
                            <button onclick="saveEdit('<%= song.id %>')" class="mt-2 block w-full bg-red-500 text-white py-2 rounded-md hover:bg-red-600 transition duration-200">
                                <i class="fas fa-check mr-2"></i>Save
                            </button>
                        </div>

                        <!-- Playlist Selector -->
                        <select id="playlist-select-<%= song.id %>" class="mt-2 w-full bg-gray-700 text-white border border-gray-600 rounded-md">
                            <option value="">Select Playlist</option>
                            <% playlists.forEach(playlist => { %>
                                <option value="<%= playlist.id %>"><%= playlist.name %></option>
                            <% }) %>
                        </select>
                        <button onclick="addToPlaylist('<%= song.id %>')" class="mt-2 block bg-blue-500 text-white py-2 rounded-md hover:bg-blue-600 transition duration-200">
                            Add to Playlist
                        </button>

                        <a href="/play/<%= song.id %>" class="mt-4 block text-center bg-gray-500 text-white py-2 rounded-md hover:bg-black transition duration-200">
                            <i class="fas fa-play mr-2"></i>Play
                        </a>
                        <a href="#" onclick="deleteSong('<%= song.id %>')" class="mt-4 block text-center bg-red-500 text-white py-2 rounded-md hover:bg-red-600 transition duration-200">
                            <i class="fas fa-trash mr-2"></i>Delete
                        </a>
                    </div>
                </div>
            <% }) %>
        </div>
    </main>
    
    <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
    <script>
        function editTitle(songId) {
            document.getElementById(`edit-section-${songId}`).classList.remove('hidden');
            document.getElementById(`song-title-${songId}`).classList.add('hidden');
        }
    
        function saveEdit(songId) {
            const newTitle = document.getElementById(`edit-title-${songId}`).value;

            fetch(`/edit-song/${songId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ title: newTitle }),
            })
            .then(response => {
                if (response.ok) {
                    alert('Song title updated successfully!');
                    location.reload(); // Reload the page to reflect changes
                } else {
                    alert('Failed to update song title.');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred while updating the song title.');
            });
        }

        function deleteSong(songId) {
            if (confirm('Are you sure you want to delete this song?')) {
                fetch(`/delete-song/${songId}`, {
                    method: 'DELETE',  
                })
                .then(response => {
                    if (response.ok) {
                        alert('Song deleted successfully!');
                        location.reload(); // Reload to update the song list
                    } else {
                        alert('Failed to delete song.');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred while deleting the song.');
                });
            }
        }

        function addToPlaylist(songId) {
            const playlistId = document.getElementById(`playlist-select-${songId}`).value;
        
            if (!playlistId) {
                alert('Please select a playlist.');
                return;
            }
        
            fetch('/add-to-playlist', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ playlistId, songId }),
            })
            .then(response => {
                if (response.ok) {
                    alert('Song added to playlist successfully!');
                } else {
                    alert('Failed to add song to playlist.');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred while adding the song to the playlist.');
            });
        }
        
            const playlistId = document.getElementById(`playlist-select-${songId}`).value;

            if (!playlistId) {
                alert('Please select a playlist.');
                return;
            }

            fetch('/add-to-playlist', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ playlistId, songId }),
            })
            .then(response => {
                if (response.ok) {
                    alert('Song added to playlist successfully!');
                } else {
                    alert('Failed to add song to playlist.');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred while adding the song to the playlist.');
            });
        

        function addPlaylist() {
            const playlistName = document.getElementById('playlist-name').value;
        
            if (!playlistName) {
                alert('Please enter a playlist name.');
                return;
            }
        
            fetch('/create-playlist', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ name: playlistName }),
            })
            .then(response => {
                if (response.ok) {
                    alert('Playlist created successfully!');
                    location.reload(); // Reload to see the new playlist
                } else {
                    alert('Failed to create playlist.');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred while creating the playlist.');
            });
        }
        
    </script>
</body>
</html>
